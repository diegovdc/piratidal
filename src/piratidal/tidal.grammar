(* The pattern *)
pattern = fastcat (<ws> <'.'> <ws> fastcat)*

(* Basic types *)
ws = #"\s+"
word = #"[a-zA-Z]([a-zA-Z0-9]*)"
int = #"-?[0-9]+"
float = #"(-?)\d+(\.\d+)"
silence = "~"
<comma> =  <ws? ',' ws?>
<token> = word | sample | int | float | silence | fast | group | slowcat | slow | polymeter | elongate | replicate | euclidean | choose | degrade

(* Pattern structures *)
fastcat = token (<ws>? token)*
stack = pattern (comma pattern)*
group = <#'\['><ws>? stack <ws>?<#'\]'>
slowcat-token = token (<ws>? token)*
slowcat = <#'\<'><ws>? slowcat-token (comma slowcat-token)* <ws>?<#'\>'>
polymeter = <#'\{'><ws>? stack <ws>?<#'\}'> polymeter-steps?
polymeter-steps = <'%'> int

(* Pattern Operations *)
op-choose = <ws '|' ws>
choose = <#'\['> stack (<op-choose> stack)+ <#'\]'>
<op-pattern> = group | slowcat
<op-value> = int | op-pattern
op-replicate =  <'!'> int
replicate = token op-replicate
op-elongate =  <'@'> int
elongate = token op-elongate
op-sample =  <':'> op-value
sample = pattern op-sample
op-euclidean = <'('> op-value comma op-value (comma op-value)? <')'>
euclidean = (word | int | float | sample) op-euclidean
op-fast = <'*'> op-value
fast = token op-fast
op-slow = <'/'> op-value
slow = token op-slow
degrade-amount = #"([0-9]*[.])?[0-9]+"
op-degrade = (<'?'> degrade-amount) | <'?'> !degrade-amount
degrade = token op-degrade
