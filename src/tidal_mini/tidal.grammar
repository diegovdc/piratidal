(* The pattern *)
pattern = cat (<ws> <'.'> <ws> cat)*

(* Basic types *)
ws = #"\s+"
word = #"[a-zA-Z]+"
int = #"[0-9]+"
float = #"[+-]?([0-9]*[.])?[0-9]+"
silence = "~"
<comma> =  <ws? ',' ws?>
<token> = word | sample | int | silence | fast | group | alt | slow | polymeter | elongate | replicate | euclidean | choose | degrade

(* Pattern structures *)
cat = token (<ws>? token)*
stack = pattern (comma pattern)*
group = <#'\['> stack <#'\]'>
alt = <#'\<'> stack <#'\>'>
polymeter = <#'\{'> stack <#'\}'> polymeter-steps?
polymeter-steps = <'%'> int

(* Pattern Operations *)
op-choose = <ws '|' ws>
choose = <#'\['> stack (<op-choose> stack)+ <#'\]'>
op-replicate =  <'!'> int
replicate = token op-replicate
op-elongate =  <'@'> int
elongate = token op-elongate
op-sample =  <':'> int
sample = word op-sample
op-euclidean = <'('> int comma int (comma int)? <')'>
euclidean = (word | int | float | sample) op-euclidean
op-fast = <'*'> int
fast = token op-fast
op-slow = <'/'> int
slow = token op-slow
op-degrade = <'?'> float?
degrade = token op-degrade
